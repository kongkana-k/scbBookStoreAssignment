package com.scb.assignment.scbBookStoreRestApi;

import org.assertj.core.api.Assertions;
import org.junit.Ignore;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.boot.web.server.LocalServerPort;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.test.context.junit4.SpringRunner;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.scb.assignment.bookStoreRestApi.ScbBookStoreRestApiApplication;
import com.scb.assignment.bookStoreRestApi.jsonObject.CreateUserRequest;
import com.scb.assignment.bookStoreRestApi.model.UserRepository;

//@Ignore
@RunWith(SpringRunner.class)
@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT, classes = ScbBookStoreRestApiApplication.class)
public class CreateUserTest {

	@LocalServerPort
	private int port;

	@Autowired
	private TestRestTemplate restTemplate;

	@Autowired
	private ObjectMapper objectMapper;

	@Autowired
	private UserRepository userRepository;

	private final String hostName = "http://localhost:";

	private HttpEntity<String> createEntityRequest(String username, String password, String dateOfBirth)
			throws JsonProcessingException {
		HttpHeaders headers = new HttpHeaders();
		headers.setContentType(MediaType.APPLICATION_JSON);
		String requestJson = objectMapper.writeValueAsString(new CreateUserRequest(username, password, dateOfBirth));
		return new HttpEntity<String>(requestJson, headers);
	}

	@Test
	public void createUserFailInvalidUsername() throws Exception {
		ResponseEntity<String> response = this.restTemplate.postForEntity(hostName + port + "/users",
				createEntityRequest("", "thisismysecret", "15/01/1985"), String.class);
		Assertions.assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);
		Assertions.assertThat(response.getBody()).contains("invalid username");
	}
	
	@Test
	public void createUserFailInvalidPassword() throws Exception {
		ResponseEntity<String> response = this.restTemplate.postForEntity(hostName + port + "/users",
				createEntityRequest("john.doe", "", "15/01/1985"), String.class);
		Assertions.assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);
		Assertions.assertThat(response.getBody()).contains("invalid password");
	}
	
	@Test
	public void createUserFailInvalidDateOfBirth() throws Exception {
		ResponseEntity<String> response = this.restTemplate.postForEntity(hostName + port + "/users",
				createEntityRequest("john.doe", "thisismysecret", ""), String.class);
		Assertions.assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);
		Assertions.assertThat(response.getBody()).contains("invalid password");
	}
	
	@Test
	public void createUserSuccess() throws Exception {
		ResponseEntity<String> response = this.restTemplate.postForEntity(hostName + port + "/users",
				createEntityRequest("john.doe", "thisismysecret", "15/01/1985"), String.class);
		Assertions.assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);
		Assertions.assertThat(response.getBody()).contains("success");
		Assertions.assertThat(userRepository.findByUsername("john.doe")).isNotNull();
	}
	
	@Test
	public void createUserFailDuplicateUser() throws Exception {
		ResponseEntity<String> response = this.restTemplate.postForEntity(hostName + port + "/users",
				createEntityRequest("john.doe", "thisismysecret", "15/01/1985"), String.class);
		Assertions.assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);
		Assertions.assertThat(response.getBody()).contains("duplicate username");
	}
	
	
	

}
