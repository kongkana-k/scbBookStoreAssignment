package com.scb.assignment.bookStoreRestApi.utility;

import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.sql.Timestamp;
import java.time.LocalDateTime;
import java.util.Base64;

import com.scb.assignment.bookStoreRestApi.exception.InvalidTokenException;
import com.scb.assignment.bookStoreRestApi.exception.TokenExpiredException;
import com.scb.assignment.bookStoreRestApi.model.User;

public class CryptographUtility {
	
	public static final int tokenTimeInMinute = 10; 
	
	public static String shaToBase64(String originalString, int salt) throws NoSuchAlgorithmException {
		MessageDigest digest = MessageDigest.getInstance("SHA-256");
		byte[] result = digest.digest((originalString + Integer.toString(salt)).getBytes(StandardCharsets.UTF_8));
		return Base64.getEncoder().encodeToString(result);
	}
	
	public static int randomInt() {
		return (int)(Math.random() * Integer.MAX_VALUE);
	}
	
	public static Timestamp getNextExpiredTime() {
		return Timestamp.valueOf(LocalDateTime.now().plusMinutes(tokenTimeInMinute));
	}
	
	public static void validateUser(User user) throws InvalidTokenException, TokenExpiredException {
		if (user == null) {
			throw new InvalidTokenException("token is not found.");
		}
		if (user.getTokenExpiredTime().before(Timestamp.valueOf(LocalDateTime.now()))) {
			throw new TokenExpiredException("token is expired.");
		}
		user.setTokenExpiredTime(CryptographUtility.getNextExpiredTime());
	}
}
