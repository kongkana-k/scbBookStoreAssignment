package com.scb.assignment.bookStoreRestApi.controller;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.scb.assignment.bookStoreRestApi.exception.InvalidTokenException;
import com.scb.assignment.bookStoreRestApi.exception.ItemNotFoundException;
import com.scb.assignment.bookStoreRestApi.exception.TokenExpiredException;
import com.scb.assignment.bookStoreRestApi.jsonObject.OrderRequest;
import com.scb.assignment.bookStoreRestApi.jsonObject.OrderResponse;
import com.scb.assignment.bookStoreRestApi.model.BookRepository;
import com.scb.assignment.bookStoreRestApi.model.Order;
import com.scb.assignment.bookStoreRestApi.model.OrderItem;
import com.scb.assignment.bookStoreRestApi.model.User;
import com.scb.assignment.bookStoreRestApi.model.Book;
import com.scb.assignment.bookStoreRestApi.model.UserRepository;
import com.scb.assignment.bookStoreRestApi.utility.CryptographUtility;

@RestController
public class OrderController {
	@Autowired
	UserRepository userRepository;
	
	@Autowired
	BookRepository bookRepository;

	@RequestMapping(value = "/users/orders", method = RequestMethod.POST)
	public OrderResponse getUser(@RequestParam(value = "token") String token, @RequestBody OrderRequest orderReq)
			throws InvalidTokenException, TokenExpiredException, ItemNotFoundException {
		User user = userRepository.findByToken(token);
		CryptographUtility.validateUser(user);
		Integer totalPrice = 0;
		Order order = new Order();
		for (Long bookId: orderReq.getOrders()) {
			Optional<Book> book = bookRepository.findById(bookId);
			if (book.isPresent()) {
				order.getOrderItems().add(new OrderItem(1, order, book.get()));
				totalPrice += book.get().getPrice();
			}else {
				throw new ItemNotFoundException("Unknown book: " + bookId);
			}
		}
		user.getOrders().add(order);
		userRepository.save(user);
		return new OrderResponse(totalPrice);
	}
}
