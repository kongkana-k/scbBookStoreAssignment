package com.scb.assignment.bookStoreRestApi.exception;

import org.springframework.core.Ordered;
import org.springframework.core.annotation.Order;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.http.converter.HttpMessageNotReadableException;
import org.springframework.web.HttpRequestMethodNotSupportedException;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.MissingPathVariableException;
import org.springframework.web.bind.MissingServletRequestParameterException;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.context.request.WebRequest;
import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;

@Order(Ordered.HIGHEST_PRECEDENCE)
@ControllerAdvice
public class RestExceptionHandler extends ResponseEntityExceptionHandler {

	@ExceptionHandler(ItemNotFoundException.class)
	protected ResponseEntity<Object> handleItemNotFound(ItemNotFoundException ex) {
		ExceptionResponse response = new ExceptionResponse(HttpStatus.NOT_FOUND,
				ex.getClass().getSimpleName() + ": " + ex.getMessage());
		return new ResponseEntity<>(response, response.getStatus());
	}

	@ExceptionHandler(InvalidTokenException.class)
	protected ResponseEntity<Object> handleInvalidToken(InvalidTokenException ex) {
		ExceptionResponse response = new ExceptionResponse(HttpStatus.UNAUTHORIZED,
				ex.getClass().getSimpleName() + ": " + ex.getMessage());
		return new ResponseEntity<>(response, response.getStatus());
	}

	@ExceptionHandler(TokenExpiredException.class)
	protected ResponseEntity<Object> handleTokenExpired(TokenExpiredException ex) {
		ExceptionResponse response = new ExceptionResponse(HttpStatus.UNAUTHORIZED,
				ex.getClass().getSimpleName() + ": " + ex.getMessage());
		return new ResponseEntity<>(response, response.getStatus());
	}

	@ExceptionHandler(InternalErrorException.class)
	protected ResponseEntity<Object> handleInternalError(InternalErrorException ex) {
		ExceptionResponse response = new ExceptionResponse(HttpStatus.INTERNAL_SERVER_ERROR,
				ex.getClass().getSimpleName() + ": " + ex.getMessage());
		return new ResponseEntity<>(response, response.getStatus());
	}

	@ExceptionHandler(AuthenticationException.class)
	protected ResponseEntity<Object> handleAuthentication(AuthenticationException ex) {
		ExceptionResponse response = new ExceptionResponse(HttpStatus.UNAUTHORIZED,
				ex.getClass().getSimpleName() + ": " + ex.getMessage());
		return new ResponseEntity<>(response, response.getStatus());
	}

	@Override
	protected ResponseEntity<Object> handleMissingServletRequestParameter(MissingServletRequestParameterException ex,
			HttpHeaders headers, HttpStatus status, WebRequest request) {
		ExceptionResponse response = new ExceptionResponse(HttpStatus.BAD_REQUEST,
				ex.getClass().getSimpleName() + ": " + ex.getMessage());
		return new ResponseEntity<>(response, response.getStatus());
	}

	@Override
	protected ResponseEntity<Object> handleHttpMessageNotReadable(HttpMessageNotReadableException ex,
			HttpHeaders headers, HttpStatus status, WebRequest request) {
		ExceptionResponse response = new ExceptionResponse(HttpStatus.BAD_REQUEST,
				ex.getClass().getSimpleName() + ": " + ex.getMessage());
		return new ResponseEntity<>(response, response.getStatus());
	}

	@Override
	protected ResponseEntity<Object> handleHttpRequestMethodNotSupported(HttpRequestMethodNotSupportedException ex,
			HttpHeaders headers, HttpStatus status, WebRequest request) {
		ExceptionResponse response = new ExceptionResponse(HttpStatus.METHOD_NOT_ALLOWED,
				ex.getClass().getSimpleName() + ": " + ex.getMessage());
		return new ResponseEntity<>(response, response.getStatus());
	}
	
	@Override
	protected ResponseEntity<Object> handleMethodArgumentNotValid(MethodArgumentNotValidException ex, HttpHeaders headers, HttpStatus status, WebRequest request){
		ExceptionResponse response = new ExceptionResponse(HttpStatus.BAD_REQUEST,
				ex.getClass().getSimpleName() + ": " + ex.getMessage());
		return new ResponseEntity<>(response, response.getStatus());
	}
	
	@Override	
	protected ResponseEntity<java.lang.Object>	handleMissingPathVariable(MissingPathVariableException ex, HttpHeaders headers, HttpStatus status, WebRequest request){
		ExceptionResponse response = new ExceptionResponse(HttpStatus.BAD_REQUEST,
				ex.getClass().getSimpleName() + ": " + ex.getMessage());
		return new ResponseEntity<>(response, response.getStatus());
	}
	
	@Override
	protected ResponseEntity<java.lang.Object>	handleMissingServletRequestPart(MissingServletRequestPartException ex, HttpHeaders headers, HttpStatus status, WebRequest request){
		
	}
}
